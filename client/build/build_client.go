// Code generated by go-swagger; DO NOT EDIT.

package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new build API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostAppRestBuildsBuildLocator post app rest builds build locator API
*/
func (a *Client) PostAppRestBuildsBuildLocator(params *PostAppRestBuildsBuildLocatorParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppRestBuildsBuildLocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppRestBuildsBuildLocatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppRestBuildsBuildLocator",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAppRestBuildsBuildLocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppRestBuildsBuildLocatorOK), nil

}

/*
PutAppRestBuildsBuildLocatorAttributesName put app rest builds build locator attributes name API
*/
func (a *Client) PutAppRestBuildsBuildLocatorAttributesName(params *PutAppRestBuildsBuildLocatorAttributesNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildsBuildLocatorAttributesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestBuildsBuildLocatorAttributesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestBuildsBuildLocatorAttributesName",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/attributes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestBuildsBuildLocatorAttributesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppRestBuildsBuildLocatorAttributesNameOK), nil

}

/*
AddTags add tags API
*/
func (a *Client) AddTags(params *AddTagsParams, authInfo runtime.ClientAuthInfoWriter) (*AddTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTags",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddTagsOK), nil

}

/*
CancelBuild cancel build API
*/
func (a *Client) CancelBuild(params *CancelBuildParams, authInfo runtime.ClientAuthInfoWriter) (*CancelBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/example/buildCancelRequest",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelBuildOK), nil

}

/*
DeleteBuild delete build API
*/
func (a *Client) DeleteBuild(params *DeleteBuildParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuild",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBuilds delete builds API
*/
func (a *Client) DeleteBuilds(params *DeleteBuildsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuilds",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteComment delete comment API
*/
func (a *Client) DeleteComment(params *DeleteCommentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteComment",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetArtifactsDirectory get artifacts directory API
*/
func (a *Client) GetArtifactsDirectory(params *GetArtifactsDirectoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactsDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsDirectoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactsDirectory",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifactsDirectory",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactsDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArtifactsDirectoryOK), nil

}

/*
GetCanceledInfo get canceled info API
*/
func (a *Client) GetCanceledInfo(params *GetCanceledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetCanceledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCanceledInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCanceledInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/canceledInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCanceledInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCanceledInfoOK), nil

}

/*
GetPinned get pinned API
*/
func (a *Client) GetPinned(params *GetPinnedParams, authInfo runtime.ClientAuthInfoWriter) (*GetPinnedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPinnedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPinned",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/pin",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPinnedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPinnedOK), nil

}

/*
GetResolvedParameter get resolved parameter API
*/
func (a *Client) GetResolvedParameter(params *GetResolvedParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetResolvedParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResolvedParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResolvedParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resolved/{value}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResolvedParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResolvedParameterOK), nil

}

/*
PinBuild pin build API
*/
func (a *Client) PinBuild(params *PinBuildParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinBuild",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/pin",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ReplaceComment replace comment API
*/
func (a *Client) ReplaceComment(params *ReplaceCommentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCommentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceComment",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ReplaceTags replace tags API
*/
func (a *Client) ReplaceTags(params *ReplaceTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTags",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceTagsOK), nil

}

/*
ServeAggregatedBuildStatus serve aggregated build status API
*/
func (a *Client) ServeAggregatedBuildStatus(params *ServeAggregatedBuildStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAggregatedBuildStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAggregatedBuildStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAggregatedBuildStatus",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/aggregated/{buildLocator}/status",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAggregatedBuildStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeAggregatedBuildStatusOK), nil

}

/*
ServeAggregatedBuildStatusIcon serve aggregated build status icon API
*/
func (a *Client) ServeAggregatedBuildStatusIcon(params *ServeAggregatedBuildStatusIconParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAggregatedBuildStatusIconParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAggregatedBuildStatusIcon",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAggregatedBuildStatusIconReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ServeAllBuilds serve all builds API
*/
func (a *Client) ServeAllBuilds(params *ServeAllBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAllBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAllBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAllBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/builds",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAllBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeAllBuildsOK), nil

}

/*
ServeBuild serve build API
*/
func (a *Client) ServeBuild(params *ServeBuildParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildOK), nil

}

/*
ServeBuildActualParameters serve build actual parameters API
*/
func (a *Client) ServeBuildActualParameters(params *ServeBuildActualParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildActualParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildActualParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildActualParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resulting-properties",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildActualParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildActualParametersOK), nil

}

/*
ServeBuildFieldByBuildOnly serve build field by build only API
*/
func (a *Client) ServeBuildFieldByBuildOnly(params *ServeBuildFieldByBuildOnlyParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldByBuildOnlyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildFieldByBuildOnlyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildFieldByBuildOnly",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildFieldByBuildOnlyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildFieldByBuildOnlyOK), nil

}

/*
ServeBuildRelatedIssues serve build related issues API
*/
func (a *Client) ServeBuildRelatedIssues(params *ServeBuildRelatedIssuesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildRelatedIssuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildRelatedIssuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildRelatedIssues",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/relatedIssues",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildRelatedIssuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildRelatedIssuesOK), nil

}

/*
ServeBuildRelatedIssuesOld serve build related issues old API
*/
func (a *Client) ServeBuildRelatedIssuesOld(params *ServeBuildRelatedIssuesOldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildRelatedIssuesOldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildRelatedIssuesOldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildRelatedIssuesOld",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/related-issues",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildRelatedIssuesOldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildRelatedIssuesOldOK), nil

}

/*
ServeBuildStatisticValue serve build statistic value API
*/
func (a *Client) ServeBuildStatisticValue(params *ServeBuildStatisticValueParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildStatisticValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildStatisticValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildStatisticValue",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statistics/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildStatisticValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildStatisticValueOK), nil

}

/*
ServeBuildStatisticValues serve build statistic values API
*/
func (a *Client) ServeBuildStatisticValues(params *ServeBuildStatisticValuesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildStatisticValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildStatisticValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildStatisticValues",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statistics",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildStatisticValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildStatisticValuesOK), nil

}

/*
ServeBuildStatusIcon serve build status icon API
*/
func (a *Client) ServeBuildStatusIcon(params *ServeBuildStatusIconParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildStatusIconParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildStatusIcon",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusIcon{suffix}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildStatusIconReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ServeSourceFile serve source file API
*/
func (a *Client) ServeSourceFile(params *ServeSourceFileParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeSourceFileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveSourceFile",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/sources/files/{fileName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeSourceFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ServeTags serve tags API
*/
func (a *Client) ServeTags(params *ServeTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveTags",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeTagsOK), nil

}

/*
UnpinBuild unpin build API
*/
func (a *Client) UnpinBuild(params *UnpinBuildParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnpinBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unpinBuild",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/pin",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnpinBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
