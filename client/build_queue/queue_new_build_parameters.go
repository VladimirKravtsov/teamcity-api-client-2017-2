// Code generated by go-swagger; DO NOT EDIT.

package build_queue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/VladimirKravtsov/teamcity-api-client-2017-2/models"
)

// NewQueueNewBuildParams creates a new QueueNewBuildParams object
// with the default values initialized.
func NewQueueNewBuildParams() *QueueNewBuildParams {
	var ()
	return &QueueNewBuildParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueueNewBuildParamsWithTimeout creates a new QueueNewBuildParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueueNewBuildParamsWithTimeout(timeout time.Duration) *QueueNewBuildParams {
	var ()
	return &QueueNewBuildParams{

		timeout: timeout,
	}
}

// NewQueueNewBuildParamsWithContext creates a new QueueNewBuildParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueueNewBuildParamsWithContext(ctx context.Context) *QueueNewBuildParams {
	var ()
	return &QueueNewBuildParams{

		Context: ctx,
	}
}

// NewQueueNewBuildParamsWithHTTPClient creates a new QueueNewBuildParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueueNewBuildParamsWithHTTPClient(client *http.Client) *QueueNewBuildParams {
	var ()
	return &QueueNewBuildParams{
		HTTPClient: client,
	}
}

/*QueueNewBuildParams contains all the parameters to send to the API endpoint
for the queue new build operation typically these are written to a http.Request
*/
type QueueNewBuildParams struct {

	/*Body*/
	Body *models.Build
	/*MoveToTop*/
	MoveToTop *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the queue new build params
func (o *QueueNewBuildParams) WithTimeout(timeout time.Duration) *QueueNewBuildParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the queue new build params
func (o *QueueNewBuildParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the queue new build params
func (o *QueueNewBuildParams) WithContext(ctx context.Context) *QueueNewBuildParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the queue new build params
func (o *QueueNewBuildParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the queue new build params
func (o *QueueNewBuildParams) WithHTTPClient(client *http.Client) *QueueNewBuildParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the queue new build params
func (o *QueueNewBuildParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the queue new build params
func (o *QueueNewBuildParams) WithBody(body *models.Build) *QueueNewBuildParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the queue new build params
func (o *QueueNewBuildParams) SetBody(body *models.Build) {
	o.Body = body
}

// WithMoveToTop adds the moveToTop to the queue new build params
func (o *QueueNewBuildParams) WithMoveToTop(moveToTop *bool) *QueueNewBuildParams {
	o.SetMoveToTop(moveToTop)
	return o
}

// SetMoveToTop adds the moveToTop to the queue new build params
func (o *QueueNewBuildParams) SetMoveToTop(moveToTop *bool) {
	o.MoveToTop = moveToTop
}

// WriteToRequest writes these params to a swagger request
func (o *QueueNewBuildParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.MoveToTop != nil {

		// query param moveToTop
		var qrMoveToTop bool
		if o.MoveToTop != nil {
			qrMoveToTop = *o.MoveToTop
		}
		qMoveToTop := swag.FormatBool(qrMoveToTop)
		if qMoveToTop != "" {
			if err := r.SetQueryParam("moveToTop", qMoveToTop); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
