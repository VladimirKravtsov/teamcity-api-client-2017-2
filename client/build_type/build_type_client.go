// Code generated by go-swagger; DO NOT EDIT.

package build_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new build type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PutAppRestBuildTypesBtLocatorParametersName put app rest build types bt locator parameters name API
*/
func (a *Client) PutAppRestBuildTypesBtLocatorParametersName(params *PutAppRestBuildTypesBtLocatorParametersNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildTypesBtLocatorParametersNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestBuildTypesBtLocatorParametersNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestBuildTypesBtLocatorParametersName",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestBuildTypesBtLocatorParametersNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppRestBuildTypesBtLocatorParametersNameOK), nil

}

/*
PutAppRestBuildTypesBtLocatorSettingsName put app rest build types bt locator settings name API
*/
func (a *Client) PutAppRestBuildTypesBtLocatorSettingsName(params *PutAppRestBuildTypesBtLocatorSettingsNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildTypesBtLocatorSettingsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestBuildTypesBtLocatorSettingsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestBuildTypesBtLocatorSettingsName",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/settings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestBuildTypesBtLocatorSettingsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppRestBuildTypesBtLocatorSettingsNameOK), nil

}

/*
AddAgentRequirement add agent requirement API
*/
func (a *Client) AddAgentRequirement(params *AddAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*AddAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAgentRequirementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAgentRequirement",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAgentRequirementOK), nil

}

/*
AddArtifactDep add artifact dep API
*/
func (a *Client) AddArtifactDep(params *AddArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*AddArtifactDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddArtifactDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addArtifactDep",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddArtifactDepOK), nil

}

/*
AddBuildType add build type API
*/
func (a *Client) AddBuildType(params *AddBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*AddBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddBuildTypeOK), nil

}

/*
AddFeature add feature API
*/
func (a *Client) AddFeature(params *AddFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*AddFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFeature",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddFeatureOK), nil

}

/*
AddFeatureParameter add feature parameter API
*/
func (a *Client) AddFeatureParameter(params *AddFeatureParameterParams, authInfo runtime.ClientAuthInfoWriter) (*AddFeatureParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFeatureParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFeatureParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFeatureParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddFeatureParameterOK), nil

}

/*
AddSnapshotDep add snapshot dep API
*/
func (a *Client) AddSnapshotDep(params *AddSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*AddSnapshotDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSnapshotDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSnapshotDep",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddSnapshotDepOK), nil

}

/*
AddStep add step API
*/
func (a *Client) AddStep(params *AddStepParams, authInfo runtime.ClientAuthInfoWriter) (*AddStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStep",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddStepOK), nil

}

/*
AddStepParameter add step parameter API
*/
func (a *Client) AddStepParameter(params *AddStepParameterParams, authInfo runtime.ClientAuthInfoWriter) (*AddStepParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStepParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStepParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStepParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddStepParameterOK), nil

}

/*
AddTemplate add template API
*/
func (a *Client) AddTemplate(params *AddTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*AddTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTemplate",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddTemplateOK), nil

}

/*
AddTrigger add trigger API
*/
func (a *Client) AddTrigger(params *AddTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*AddTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTrigger",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddTriggerOK), nil

}

/*
AddVcsRootEntry add vcs root entry API
*/
func (a *Client) AddVcsRootEntry(params *AddVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*AddVcsRootEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVcsRootEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addVcsRootEntry",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddVcsRootEntryOK), nil

}

/*
ChangeArtifactDepSetting change artifact dep setting API
*/
func (a *Client) ChangeArtifactDepSetting(params *ChangeArtifactDepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeArtifactDepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeArtifactDepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeArtifactDepSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeArtifactDepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeArtifactDepSettingOK), nil

}

/*
ChangeFeatureSetting change feature setting API
*/
func (a *Client) ChangeFeatureSetting(params *ChangeFeatureSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeFeatureSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeFeatureSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeFeatureSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeFeatureSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeFeatureSettingOK), nil

}

/*
ChangeRequirementSetting change requirement setting API
*/
func (a *Client) ChangeRequirementSetting(params *ChangeRequirementSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeRequirementSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeRequirementSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeRequirementSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeRequirementSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeRequirementSettingOK), nil

}

/*
ChangeStepSetting change step setting API
*/
func (a *Client) ChangeStepSetting(params *ChangeStepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeStepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeStepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeStepSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeStepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeStepSettingOK), nil

}

/*
ChangeTriggerSetting change trigger setting API
*/
func (a *Client) ChangeTriggerSetting(params *ChangeTriggerSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeTriggerSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTriggerSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTriggerSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTriggerSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeTriggerSettingOK), nil

}

/*
DeleteAgentRequirement delete agent requirement API
*/
func (a *Client) DeleteAgentRequirement(params *DeleteAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentRequirementParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAgentRequirement",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteArtifactDep delete artifact dep API
*/
func (a *Client) DeleteArtifactDep(params *DeleteArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactDepParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArtifactDep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBuildType delete build type API
*/
func (a *Client) DeleteBuildType(params *DeleteBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildTypeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteFeature delete feature API
*/
func (a *Client) DeleteFeature(params *DeleteFeatureParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeatureParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFeature",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteSnapshotDep delete snapshot dep API
*/
func (a *Client) DeleteSnapshotDep(params *DeleteSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotDepParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotDep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteStep delete step API
*/
func (a *Client) DeleteStep(params *DeleteStepParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStepParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteTrigger delete trigger API
*/
func (a *Client) DeleteTrigger(params *DeleteTriggerParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTriggerParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTrigger",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteVcsRootEntry delete vcs root entry API
*/
func (a *Client) DeleteVcsRootEntry(params *DeleteVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootEntryParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVcsRootEntry",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAgentRequirement get agent requirement API
*/
func (a *Client) GetAgentRequirement(params *GetAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentRequirementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAgentRequirement",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAgentRequirementOK), nil

}

/*
GetAgentRequirements get agent requirements API
*/
func (a *Client) GetAgentRequirements(params *GetAgentRequirementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentRequirementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAgentRequirements",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentRequirementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAgentRequirementsOK), nil

}

/*
GetAliases get aliases API
*/
func (a *Client) GetAliases(params *GetAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAliases",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/aliases",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAliasesOK), nil

}

/*
GetArtifactDep get artifact dep API
*/
func (a *Client) GetArtifactDep(params *GetArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArtifactDepOK), nil

}

/*
GetArtifactDepSetting get artifact dep setting API
*/
func (a *Client) GetArtifactDepSetting(params *GetArtifactDepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDepSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArtifactDepSettingOK), nil

}

/*
GetArtifactDeps get artifact deps API
*/
func (a *Client) GetArtifactDeps(params *GetArtifactDepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDeps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArtifactDepsOK), nil

}

/*
GetBuildTypes get build types API
*/
func (a *Client) GetBuildTypes(params *GetBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildTypesOK), nil

}

/*
GetCurrentVcsInstances get current vcs instances API
*/
func (a *Client) GetCurrentVcsInstances(params *GetCurrentVcsInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentVcsInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentVcsInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentVcsInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-instances",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentVcsInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentVcsInstancesOK), nil

}

/*
GetFeature get feature API
*/
func (a *Client) GetFeature(params *GetFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeature",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureOK), nil

}

/*
GetFeatureParameter get feature parameter API
*/
func (a *Client) GetFeatureParameter(params *GetFeatureParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureParameterOK), nil

}

/*
GetFeatureParameters get feature parameters API
*/
func (a *Client) GetFeatureParameters(params *GetFeatureParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureParametersOK), nil

}

/*
GetFeatureSetting get feature setting API
*/
func (a *Client) GetFeatureSetting(params *GetFeatureSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureSettingOK), nil

}

/*
GetFeatures get features API
*/
func (a *Client) GetFeatures(params *GetFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatures",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeaturesOK), nil

}

/*
GetRequirementSetting get requirement setting API
*/
func (a *Client) GetRequirementSetting(params *GetRequirementSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequirementSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequirementSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRequirementSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequirementSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRequirementSettingOK), nil

}

/*
GetSnapshotDep get snapshot dep API
*/
func (a *Client) GetSnapshotDep(params *GetSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotDep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotDepOK), nil

}

/*
GetSnapshotDeps get snapshot deps API
*/
func (a *Client) GetSnapshotDeps(params *GetSnapshotDepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotDeps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotDepsOK), nil

}

/*
GetStep get step API
*/
func (a *Client) GetStep(params *GetStepParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStepOK), nil

}

/*
GetStepParameter get step parameter API
*/
func (a *Client) GetStepParameter(params *GetStepParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStepParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStepParameterOK), nil

}

/*
GetStepParameters get step parameters API
*/
func (a *Client) GetStepParameters(params *GetStepParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStepParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStepParametersOK), nil

}

/*
GetStepSetting get step setting API
*/
func (a *Client) GetStepSetting(params *GetStepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStepSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStepSettingOK), nil

}

/*
GetSteps get steps API
*/
func (a *Client) GetSteps(params *GetStepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSteps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStepsOK), nil

}

/*
GetTemplate get template API
*/
func (a *Client) GetTemplate(params *GetTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplate",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplateOK), nil

}

/*
GetTemplates get templates API
*/
func (a *Client) GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplates",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesOK), nil

}

/*
GetTrigger get trigger API
*/
func (a *Client) GetTrigger(params *GetTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTrigger",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTriggerOK), nil

}

/*
GetTriggerSetting get trigger setting API
*/
func (a *Client) GetTriggerSetting(params *GetTriggerSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggerSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggerSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTriggerSettingOK), nil

}

/*
GetTriggers get triggers API
*/
func (a *Client) GetTriggers(params *GetTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggers",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTriggersOK), nil

}

/*
GetVCSLabelingOptions get v c s labeling options API
*/
func (a *Client) GetVCSLabelingOptions(params *GetVCSLabelingOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVCSLabelingOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVCSLabelingOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVCSLabelingOptions",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcsLabeling",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVCSLabelingOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVCSLabelingOptionsOK), nil

}

/*
GetVcsRootEntries get vcs root entries API
*/
func (a *Client) GetVcsRootEntries(params *GetVcsRootEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcsRootEntries",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVcsRootEntriesOK), nil

}

/*
GetVcsRootEntry get vcs root entry API
*/
func (a *Client) GetVcsRootEntry(params *GetVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcsRootEntry",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVcsRootEntryOK), nil

}

/*
GetVcsRootEntryCheckoutRules get vcs root entry checkout rules API
*/
func (a *Client) GetVcsRootEntryCheckoutRules(params *GetVcsRootEntryCheckoutRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntryCheckoutRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootEntryCheckoutRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcsRootEntryCheckoutRules",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootEntryCheckoutRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVcsRootEntryCheckoutRulesOK), nil

}

/*
RemoveAllTemplates remove all templates API
*/
func (a *Client) RemoveAllTemplates(params *RemoveAllTemplatesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAllTemplatesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeAllTemplates",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveAllTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RemoveTemplate remove template API
*/
func (a *Client) RemoveTemplate(params *RemoveTemplateParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTemplateParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeTemplate",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ReplaceAgentRequirement replace agent requirement API
*/
func (a *Client) ReplaceAgentRequirement(params *ReplaceAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAgentRequirementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAgentRequirement",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceAgentRequirementOK), nil

}

/*
ReplaceAgentRequirements replace agent requirements API
*/
func (a *Client) ReplaceAgentRequirements(params *ReplaceAgentRequirementsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAgentRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAgentRequirementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAgentRequirements",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAgentRequirementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceAgentRequirementsOK), nil

}

/*
ReplaceArtifactDep replace artifact dep API
*/
func (a *Client) ReplaceArtifactDep(params *ReplaceArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceArtifactDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceArtifactDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceArtifactDep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceArtifactDepOK), nil

}

/*
ReplaceArtifactDeps replace artifact deps API
*/
func (a *Client) ReplaceArtifactDeps(params *ReplaceArtifactDepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceArtifactDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceArtifactDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceArtifactDeps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceArtifactDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceArtifactDepsOK), nil

}

/*
ReplaceFeature replace feature API
*/
func (a *Client) ReplaceFeature(params *ReplaceFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFeature",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceFeatureOK), nil

}

/*
ReplaceFeatureParameters replace feature parameters API
*/
func (a *Client) ReplaceFeatureParameters(params *ReplaceFeatureParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeatureParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFeatureParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFeatureParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceFeatureParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceFeatureParametersOK), nil

}

/*
ReplaceFeatures replace features API
*/
func (a *Client) ReplaceFeatures(params *ReplaceFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFeatures",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceFeaturesOK), nil

}

/*
ReplaceSnapshotDep replace snapshot dep API
*/
func (a *Client) ReplaceSnapshotDep(params *ReplaceSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceSnapshotDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSnapshotDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSnapshotDep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceSnapshotDepOK), nil

}

/*
ReplaceSnapshotDeps replace snapshot deps API
*/
func (a *Client) ReplaceSnapshotDeps(params *ReplaceSnapshotDepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceSnapshotDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSnapshotDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSnapshotDeps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceSnapshotDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceSnapshotDepsOK), nil

}

/*
ReplaceStep replace step API
*/
func (a *Client) ReplaceStep(params *ReplaceStepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceStepOK), nil

}

/*
ReplaceStepParameters replace step parameters API
*/
func (a *Client) ReplaceStepParameters(params *ReplaceStepParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStepParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStepParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceStepParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceStepParametersOK), nil

}

/*
ReplaceSteps replace steps API
*/
func (a *Client) ReplaceSteps(params *ReplaceStepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSteps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceStepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceStepsOK), nil

}

/*
ReplaceTrigger replace trigger API
*/
func (a *Client) ReplaceTrigger(params *ReplaceTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTrigger",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceTriggerOK), nil

}

/*
ReplaceTriggers replace triggers API
*/
func (a *Client) ReplaceTriggers(params *ReplaceTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTriggers",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceTriggersOK), nil

}

/*
ReplaceVcsRootEntries replace vcs root entries API
*/
func (a *Client) ReplaceVcsRootEntries(params *ReplaceVcsRootEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceVcsRootEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceVcsRootEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceVcsRootEntries",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceVcsRootEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceVcsRootEntriesOK), nil

}

/*
ServeBranches serve branches API
*/
func (a *Client) ServeBranches(params *ServeBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBranchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBranches",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/branches",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBranchesOK), nil

}

/*
ServeBuildField serve build field API
*/
func (a *Client) ServeBuildField(params *ServeBuildFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildField",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/builds/{buildLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildFieldOK), nil

}

/*
ServeBuildTypeBuildsTags serve build type builds tags API
*/
func (a *Client) ServeBuildTypeBuildsTags(params *ServeBuildTypeBuildsTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeBuildsTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeBuildsTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeBuildsTags",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/buildTags",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeBuildsTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildTypeBuildsTagsOK), nil

}

/*
ServeBuildTypeField serve build type field API
*/
func (a *Client) ServeBuildTypeField(params *ServeBuildTypeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeField",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildTypeFieldOK), nil

}

/*
ServeBuildTypeXML serve build type XML API
*/
func (a *Client) ServeBuildTypeXML(params *ServeBuildTypeXMLParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeXMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeXMLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeXML",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeXMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeBuildTypeXMLOK), nil

}

/*
SetBuildTypeField set build type field API
*/
func (a *Client) SetBuildTypeField(params *SetBuildTypeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildTypeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTypeFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildTypeField",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTypeFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetBuildTypeFieldOK), nil

}

/*
SetTemplates set templates API
*/
func (a *Client) SetTemplates(params *SetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*SetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setTemplates",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetTemplatesOK), nil

}

/*
SetVCSLabelingOptions set v c s labeling options API
*/
func (a *Client) SetVCSLabelingOptions(params *SetVCSLabelingOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*SetVCSLabelingOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVCSLabelingOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setVCSLabelingOptions",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcsLabeling",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVCSLabelingOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetVCSLabelingOptionsOK), nil

}

/*
UpdateVcsRootEntry update vcs root entry API
*/
func (a *Client) UpdateVcsRootEntry(params *UpdateVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVcsRootEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcsRootEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVcsRootEntry",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVcsRootEntryOK), nil

}

/*
UpdateVcsRootEntryCheckoutRules update vcs root entry checkout rules API
*/
func (a *Client) UpdateVcsRootEntryCheckoutRules(params *UpdateVcsRootEntryCheckoutRulesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVcsRootEntryCheckoutRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcsRootEntryCheckoutRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVcsRootEntryCheckoutRules",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcsRootEntryCheckoutRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVcsRootEntryCheckoutRulesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
