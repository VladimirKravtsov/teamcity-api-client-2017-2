// Code generated by go-swagger; DO NOT EDIT.

package change

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new change API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for change API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetChangeAttributes get change attributes API
*/
func (a *Client) GetChangeAttributes(params *GetChangeAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeAttributes",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/attributes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeAttributesOK), nil

}

/*
GetChangeDuplicates get change duplicates API
*/
func (a *Client) GetChangeDuplicates(params *GetChangeDuplicatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeDuplicatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeDuplicatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeDuplicates",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/duplicates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeDuplicatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeDuplicatesOK), nil

}

/*
GetChangeField get change field API
*/
func (a *Client) GetChangeField(params *GetChangeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeField",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeFieldOK), nil

}

/*
GetChangeFirstBuilds get change first builds API
*/
func (a *Client) GetChangeFirstBuilds(params *GetChangeFirstBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeFirstBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeFirstBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeFirstBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/firstBuilds",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeFirstBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeFirstBuildsOK), nil

}

/*
GetChangeIssue get change issue API
*/
func (a *Client) GetChangeIssue(params *GetChangeIssueParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeIssue",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/issues",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeIssueOK), nil

}

/*
GetChangeParentRevisions get change parent revisions API
*/
func (a *Client) GetChangeParentRevisions(params *GetChangeParentRevisionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeParentRevisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeParentRevisionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeParentRevisions",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/parentRevisions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeParentRevisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeParentRevisionsOK), nil

}

/*
GetChangeVCSRoot get change v c s root API
*/
func (a *Client) GetChangeVCSRoot(params *GetChangeVCSRootParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeVCSRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeVCSRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeVCSRoot",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/vcsRoot",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeVCSRootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeVCSRootOK), nil

}

/*
GetChangeVCSRootInstance get change v c s root instance API
*/
func (a *Client) GetChangeVCSRootInstance(params *GetChangeVCSRootInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetChangeVCSRootInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeVCSRootInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChangeVCSRootInstance",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/vcsRootInstance",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeVCSRootInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChangeVCSRootInstanceOK), nil

}

/*
GetParentChanges get parent changes API
*/
func (a *Client) GetParentChanges(params *GetParentChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetParentChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParentChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParentChanges",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/parentChanges",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParentChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParentChangesOK), nil

}

/*
GetRelatedBuildTypes get related build types API
*/
func (a *Client) GetRelatedBuildTypes(params *GetRelatedBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRelatedBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRelatedBuildTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRelatedBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRelatedBuildTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRelatedBuildTypesOK), nil

}

/*
ServeChange serve change API
*/
func (a *Client) ServeChange(params *ServeChangeParams, authInfo runtime.ClientAuthInfoWriter) (*ServeChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveChange",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeChangeOK), nil

}

/*
ServeChanges serve changes API
*/
func (a *Client) ServeChanges(params *ServeChangesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveChanges",
		Method:             "GET",
		PathPattern:        "/app/rest/changes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeChangesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
