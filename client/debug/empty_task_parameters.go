// Code generated by go-swagger; DO NOT EDIT.

package debug

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmptyTaskParams creates a new EmptyTaskParams object
// with the default values initialized.
func NewEmptyTaskParams() *EmptyTaskParams {
	var (
		memoryChunksDefault = int32(1)
	)
	return &EmptyTaskParams{
		MemoryChunks: &memoryChunksDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewEmptyTaskParamsWithTimeout creates a new EmptyTaskParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmptyTaskParamsWithTimeout(timeout time.Duration) *EmptyTaskParams {
	var (
		memoryChunksDefault = int32(1)
	)
	return &EmptyTaskParams{
		MemoryChunks: &memoryChunksDefault,

		timeout: timeout,
	}
}

// NewEmptyTaskParamsWithContext creates a new EmptyTaskParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmptyTaskParamsWithContext(ctx context.Context) *EmptyTaskParams {
	var (
		memoryChunksDefault = int32(1)
	)
	return &EmptyTaskParams{
		MemoryChunks: &memoryChunksDefault,

		Context: ctx,
	}
}

// NewEmptyTaskParamsWithHTTPClient creates a new EmptyTaskParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmptyTaskParamsWithHTTPClient(client *http.Client) *EmptyTaskParams {
	var (
		memoryChunksDefault = int32(1)
	)
	return &EmptyTaskParams{
		MemoryChunks: &memoryChunksDefault,
		HTTPClient:   client,
	}
}

/*EmptyTaskParams contains all the parameters to send to the API endpoint
for the empty task operation typically these are written to a http.Request
*/
type EmptyTaskParams struct {

	/*Load*/
	Load *int32
	/*Memory*/
	Memory *int32
	/*MemoryChunks*/
	MemoryChunks *int32
	/*Time*/
	Time *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the empty task params
func (o *EmptyTaskParams) WithTimeout(timeout time.Duration) *EmptyTaskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the empty task params
func (o *EmptyTaskParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the empty task params
func (o *EmptyTaskParams) WithContext(ctx context.Context) *EmptyTaskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the empty task params
func (o *EmptyTaskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the empty task params
func (o *EmptyTaskParams) WithHTTPClient(client *http.Client) *EmptyTaskParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the empty task params
func (o *EmptyTaskParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLoad adds the load to the empty task params
func (o *EmptyTaskParams) WithLoad(load *int32) *EmptyTaskParams {
	o.SetLoad(load)
	return o
}

// SetLoad adds the load to the empty task params
func (o *EmptyTaskParams) SetLoad(load *int32) {
	o.Load = load
}

// WithMemory adds the memory to the empty task params
func (o *EmptyTaskParams) WithMemory(memory *int32) *EmptyTaskParams {
	o.SetMemory(memory)
	return o
}

// SetMemory adds the memory to the empty task params
func (o *EmptyTaskParams) SetMemory(memory *int32) {
	o.Memory = memory
}

// WithMemoryChunks adds the memoryChunks to the empty task params
func (o *EmptyTaskParams) WithMemoryChunks(memoryChunks *int32) *EmptyTaskParams {
	o.SetMemoryChunks(memoryChunks)
	return o
}

// SetMemoryChunks adds the memoryChunks to the empty task params
func (o *EmptyTaskParams) SetMemoryChunks(memoryChunks *int32) {
	o.MemoryChunks = memoryChunks
}

// WithTime adds the time to the empty task params
func (o *EmptyTaskParams) WithTime(time *string) *EmptyTaskParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the empty task params
func (o *EmptyTaskParams) SetTime(time *string) {
	o.Time = time
}

// WriteToRequest writes these params to a swagger request
func (o *EmptyTaskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Load != nil {

		// query param load
		var qrLoad int32
		if o.Load != nil {
			qrLoad = *o.Load
		}
		qLoad := swag.FormatInt32(qrLoad)
		if qLoad != "" {
			if err := r.SetQueryParam("load", qLoad); err != nil {
				return err
			}
		}

	}

	if o.Memory != nil {

		// query param memory
		var qrMemory int32
		if o.Memory != nil {
			qrMemory = *o.Memory
		}
		qMemory := swag.FormatInt32(qrMemory)
		if qMemory != "" {
			if err := r.SetQueryParam("memory", qMemory); err != nil {
				return err
			}
		}

	}

	if o.MemoryChunks != nil {

		// query param memoryChunks
		var qrMemoryChunks int32
		if o.MemoryChunks != nil {
			qrMemoryChunks = *o.MemoryChunks
		}
		qMemoryChunks := swag.FormatInt32(qrMemoryChunks)
		if qMemoryChunks != "" {
			if err := r.SetQueryParam("memoryChunks", qMemoryChunks); err != nil {
				return err
			}
		}

	}

	if o.Time != nil {

		// query param time
		var qrTime string
		if o.Time != nil {
			qrTime = *o.Time
		}
		qTime := qrTime
		if qTime != "" {
			if err := r.SetQueryParam("time", qTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
