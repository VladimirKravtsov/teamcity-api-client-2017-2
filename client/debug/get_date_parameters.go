// Code generated by go-swagger; DO NOT EDIT.

package debug

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDateParams creates a new GetDateParams object
// with the default values initialized.
func NewGetDateParams() *GetDateParams {
	var ()
	return &GetDateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDateParamsWithTimeout creates a new GetDateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDateParamsWithTimeout(timeout time.Duration) *GetDateParams {
	var ()
	return &GetDateParams{

		timeout: timeout,
	}
}

// NewGetDateParamsWithContext creates a new GetDateParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDateParamsWithContext(ctx context.Context) *GetDateParams {
	var ()
	return &GetDateParams{

		Context: ctx,
	}
}

// NewGetDateParamsWithHTTPClient creates a new GetDateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDateParamsWithHTTPClient(client *http.Client) *GetDateParams {
	var ()
	return &GetDateParams{
		HTTPClient: client,
	}
}

/*GetDateParams contains all the parameters to send to the API endpoint
for the get date operation typically these are written to a http.Request
*/
type GetDateParams struct {

	/*DateLocator*/
	DateLocator string
	/*Format*/
	Format *string
	/*Timezone*/
	Timezone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get date params
func (o *GetDateParams) WithTimeout(timeout time.Duration) *GetDateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get date params
func (o *GetDateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get date params
func (o *GetDateParams) WithContext(ctx context.Context) *GetDateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get date params
func (o *GetDateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get date params
func (o *GetDateParams) WithHTTPClient(client *http.Client) *GetDateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get date params
func (o *GetDateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateLocator adds the dateLocator to the get date params
func (o *GetDateParams) WithDateLocator(dateLocator string) *GetDateParams {
	o.SetDateLocator(dateLocator)
	return o
}

// SetDateLocator adds the dateLocator to the get date params
func (o *GetDateParams) SetDateLocator(dateLocator string) {
	o.DateLocator = dateLocator
}

// WithFormat adds the format to the get date params
func (o *GetDateParams) WithFormat(format *string) *GetDateParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the get date params
func (o *GetDateParams) SetFormat(format *string) {
	o.Format = format
}

// WithTimezone adds the timezone to the get date params
func (o *GetDateParams) WithTimezone(timezone *string) *GetDateParams {
	o.SetTimezone(timezone)
	return o
}

// SetTimezone adds the timezone to the get date params
func (o *GetDateParams) SetTimezone(timezone *string) {
	o.Timezone = timezone
}

// WriteToRequest writes these params to a swagger request
func (o *GetDateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param dateLocator
	if err := r.SetPathParam("dateLocator", o.DateLocator); err != nil {
		return err
	}

	if o.Format != nil {

		// query param format
		var qrFormat string
		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {
			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}

	}

	if o.Timezone != nil {

		// query param timezone
		var qrTimezone string
		if o.Timezone != nil {
			qrTimezone = *o.Timezone
		}
		qTimezone := qrTimezone
		if qTimezone != "" {
			if err := r.SetQueryParam("timezone", qTimezone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
