// Code generated by go-swagger; DO NOT EDIT.

package debug

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetThreadDumpParams creates a new GetThreadDumpParams object
// with the default values initialized.
func NewGetThreadDumpParams() *GetThreadDumpParams {
	var ()
	return &GetThreadDumpParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetThreadDumpParamsWithTimeout creates a new GetThreadDumpParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetThreadDumpParamsWithTimeout(timeout time.Duration) *GetThreadDumpParams {
	var ()
	return &GetThreadDumpParams{

		timeout: timeout,
	}
}

// NewGetThreadDumpParamsWithContext creates a new GetThreadDumpParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetThreadDumpParamsWithContext(ctx context.Context) *GetThreadDumpParams {
	var ()
	return &GetThreadDumpParams{

		Context: ctx,
	}
}

// NewGetThreadDumpParamsWithHTTPClient creates a new GetThreadDumpParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetThreadDumpParamsWithHTTPClient(client *http.Client) *GetThreadDumpParams {
	var ()
	return &GetThreadDumpParams{
		HTTPClient: client,
	}
}

/*GetThreadDumpParams contains all the parameters to send to the API endpoint
for the get thread dump operation typically these are written to a http.Request
*/
type GetThreadDumpParams struct {

	/*DetectLocks*/
	DetectLocks *string
	/*LockedMonitors*/
	LockedMonitors *string
	/*LockedSynchronizers*/
	LockedSynchronizers *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get thread dump params
func (o *GetThreadDumpParams) WithTimeout(timeout time.Duration) *GetThreadDumpParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get thread dump params
func (o *GetThreadDumpParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get thread dump params
func (o *GetThreadDumpParams) WithContext(ctx context.Context) *GetThreadDumpParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get thread dump params
func (o *GetThreadDumpParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get thread dump params
func (o *GetThreadDumpParams) WithHTTPClient(client *http.Client) *GetThreadDumpParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get thread dump params
func (o *GetThreadDumpParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDetectLocks adds the detectLocks to the get thread dump params
func (o *GetThreadDumpParams) WithDetectLocks(detectLocks *string) *GetThreadDumpParams {
	o.SetDetectLocks(detectLocks)
	return o
}

// SetDetectLocks adds the detectLocks to the get thread dump params
func (o *GetThreadDumpParams) SetDetectLocks(detectLocks *string) {
	o.DetectLocks = detectLocks
}

// WithLockedMonitors adds the lockedMonitors to the get thread dump params
func (o *GetThreadDumpParams) WithLockedMonitors(lockedMonitors *string) *GetThreadDumpParams {
	o.SetLockedMonitors(lockedMonitors)
	return o
}

// SetLockedMonitors adds the lockedMonitors to the get thread dump params
func (o *GetThreadDumpParams) SetLockedMonitors(lockedMonitors *string) {
	o.LockedMonitors = lockedMonitors
}

// WithLockedSynchronizers adds the lockedSynchronizers to the get thread dump params
func (o *GetThreadDumpParams) WithLockedSynchronizers(lockedSynchronizers *string) *GetThreadDumpParams {
	o.SetLockedSynchronizers(lockedSynchronizers)
	return o
}

// SetLockedSynchronizers adds the lockedSynchronizers to the get thread dump params
func (o *GetThreadDumpParams) SetLockedSynchronizers(lockedSynchronizers *string) {
	o.LockedSynchronizers = lockedSynchronizers
}

// WriteToRequest writes these params to a swagger request
func (o *GetThreadDumpParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DetectLocks != nil {

		// query param detectLocks
		var qrDetectLocks string
		if o.DetectLocks != nil {
			qrDetectLocks = *o.DetectLocks
		}
		qDetectLocks := qrDetectLocks
		if qDetectLocks != "" {
			if err := r.SetQueryParam("detectLocks", qDetectLocks); err != nil {
				return err
			}
		}

	}

	if o.LockedMonitors != nil {

		// query param lockedMonitors
		var qrLockedMonitors string
		if o.LockedMonitors != nil {
			qrLockedMonitors = *o.LockedMonitors
		}
		qLockedMonitors := qrLockedMonitors
		if qLockedMonitors != "" {
			if err := r.SetQueryParam("lockedMonitors", qLockedMonitors); err != nil {
				return err
			}
		}

	}

	if o.LockedSynchronizers != nil {

		// query param lockedSynchronizers
		var qrLockedSynchronizers string
		if o.LockedSynchronizers != nil {
			qrLockedSynchronizers = *o.LockedSynchronizers
		}
		qLockedSynchronizers := qrLockedSynchronizers
		if qLockedSynchronizers != "" {
			if err := r.SetQueryParam("lockedSynchronizers", qLockedSynchronizers); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
