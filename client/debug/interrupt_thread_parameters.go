// Code generated by go-swagger; DO NOT EDIT.

package debug

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewInterruptThreadParams creates a new InterruptThreadParams object
// with the default values initialized.
func NewInterruptThreadParams() *InterruptThreadParams {
	var ()
	return &InterruptThreadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInterruptThreadParamsWithTimeout creates a new InterruptThreadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInterruptThreadParamsWithTimeout(timeout time.Duration) *InterruptThreadParams {
	var ()
	return &InterruptThreadParams{

		timeout: timeout,
	}
}

// NewInterruptThreadParamsWithContext creates a new InterruptThreadParams object
// with the default values initialized, and the ability to set a context for a request
func NewInterruptThreadParamsWithContext(ctx context.Context) *InterruptThreadParams {
	var ()
	return &InterruptThreadParams{

		Context: ctx,
	}
}

// NewInterruptThreadParamsWithHTTPClient creates a new InterruptThreadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInterruptThreadParamsWithHTTPClient(client *http.Client) *InterruptThreadParams {
	var ()
	return &InterruptThreadParams{
		HTTPClient: client,
	}
}

/*InterruptThreadParams contains all the parameters to send to the API endpoint
for the interrupt thread operation typically these are written to a http.Request
*/
type InterruptThreadParams struct {

	/*Body*/
	Body string
	/*ThreadLocator*/
	ThreadLocator string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the interrupt thread params
func (o *InterruptThreadParams) WithTimeout(timeout time.Duration) *InterruptThreadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the interrupt thread params
func (o *InterruptThreadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the interrupt thread params
func (o *InterruptThreadParams) WithContext(ctx context.Context) *InterruptThreadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the interrupt thread params
func (o *InterruptThreadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the interrupt thread params
func (o *InterruptThreadParams) WithHTTPClient(client *http.Client) *InterruptThreadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the interrupt thread params
func (o *InterruptThreadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the interrupt thread params
func (o *InterruptThreadParams) WithBody(body string) *InterruptThreadParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the interrupt thread params
func (o *InterruptThreadParams) SetBody(body string) {
	o.Body = body
}

// WithThreadLocator adds the threadLocator to the interrupt thread params
func (o *InterruptThreadParams) WithThreadLocator(threadLocator string) *InterruptThreadParams {
	o.SetThreadLocator(threadLocator)
	return o
}

// SetThreadLocator adds the threadLocator to the interrupt thread params
func (o *InterruptThreadParams) SetThreadLocator(threadLocator string) {
	o.ThreadLocator = threadLocator
}

// WriteToRequest writes these params to a swagger request
func (o *InterruptThreadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param threadLocator
	if err := r.SetPathParam("threadLocator", o.ThreadLocator); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
