// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/VladimirKravtsov/teamcity-api-client-2017-2/models"
)

// NewStartBackupParams creates a new StartBackupParams object
// with the default values initialized.
func NewStartBackupParams() *StartBackupParams {
	var ()
	return &StartBackupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStartBackupParamsWithTimeout creates a new StartBackupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStartBackupParamsWithTimeout(timeout time.Duration) *StartBackupParams {
	var ()
	return &StartBackupParams{

		timeout: timeout,
	}
}

// NewStartBackupParamsWithContext creates a new StartBackupParams object
// with the default values initialized, and the ability to set a context for a request
func NewStartBackupParamsWithContext(ctx context.Context) *StartBackupParams {
	var ()
	return &StartBackupParams{

		Context: ctx,
	}
}

// NewStartBackupParamsWithHTTPClient creates a new StartBackupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStartBackupParamsWithHTTPClient(client *http.Client) *StartBackupParams {
	var ()
	return &StartBackupParams{
		HTTPClient: client,
	}
}

/*StartBackupParams contains all the parameters to send to the API endpoint
for the start backup operation typically these are written to a http.Request
*/
type StartBackupParams struct {

	/*AddTimestamp*/
	AddTimestamp *bool
	/*Body*/
	Body *models.BackupProcessManager
	/*FileName*/
	FileName *string
	/*IncludeBuildLogs*/
	IncludeBuildLogs *bool
	/*IncludeConfigs*/
	IncludeConfigs *bool
	/*IncludeDatabase*/
	IncludeDatabase *bool
	/*IncludePersonalChanges*/
	IncludePersonalChanges *bool
	/*IncludeRunningBuilds*/
	IncludeRunningBuilds *bool
	/*IncludeSupplimentaryData*/
	IncludeSupplimentaryData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the start backup params
func (o *StartBackupParams) WithTimeout(timeout time.Duration) *StartBackupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the start backup params
func (o *StartBackupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the start backup params
func (o *StartBackupParams) WithContext(ctx context.Context) *StartBackupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the start backup params
func (o *StartBackupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the start backup params
func (o *StartBackupParams) WithHTTPClient(client *http.Client) *StartBackupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the start backup params
func (o *StartBackupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddTimestamp adds the addTimestamp to the start backup params
func (o *StartBackupParams) WithAddTimestamp(addTimestamp *bool) *StartBackupParams {
	o.SetAddTimestamp(addTimestamp)
	return o
}

// SetAddTimestamp adds the addTimestamp to the start backup params
func (o *StartBackupParams) SetAddTimestamp(addTimestamp *bool) {
	o.AddTimestamp = addTimestamp
}

// WithBody adds the body to the start backup params
func (o *StartBackupParams) WithBody(body *models.BackupProcessManager) *StartBackupParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the start backup params
func (o *StartBackupParams) SetBody(body *models.BackupProcessManager) {
	o.Body = body
}

// WithFileName adds the fileName to the start backup params
func (o *StartBackupParams) WithFileName(fileName *string) *StartBackupParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the start backup params
func (o *StartBackupParams) SetFileName(fileName *string) {
	o.FileName = fileName
}

// WithIncludeBuildLogs adds the includeBuildLogs to the start backup params
func (o *StartBackupParams) WithIncludeBuildLogs(includeBuildLogs *bool) *StartBackupParams {
	o.SetIncludeBuildLogs(includeBuildLogs)
	return o
}

// SetIncludeBuildLogs adds the includeBuildLogs to the start backup params
func (o *StartBackupParams) SetIncludeBuildLogs(includeBuildLogs *bool) {
	o.IncludeBuildLogs = includeBuildLogs
}

// WithIncludeConfigs adds the includeConfigs to the start backup params
func (o *StartBackupParams) WithIncludeConfigs(includeConfigs *bool) *StartBackupParams {
	o.SetIncludeConfigs(includeConfigs)
	return o
}

// SetIncludeConfigs adds the includeConfigs to the start backup params
func (o *StartBackupParams) SetIncludeConfigs(includeConfigs *bool) {
	o.IncludeConfigs = includeConfigs
}

// WithIncludeDatabase adds the includeDatabase to the start backup params
func (o *StartBackupParams) WithIncludeDatabase(includeDatabase *bool) *StartBackupParams {
	o.SetIncludeDatabase(includeDatabase)
	return o
}

// SetIncludeDatabase adds the includeDatabase to the start backup params
func (o *StartBackupParams) SetIncludeDatabase(includeDatabase *bool) {
	o.IncludeDatabase = includeDatabase
}

// WithIncludePersonalChanges adds the includePersonalChanges to the start backup params
func (o *StartBackupParams) WithIncludePersonalChanges(includePersonalChanges *bool) *StartBackupParams {
	o.SetIncludePersonalChanges(includePersonalChanges)
	return o
}

// SetIncludePersonalChanges adds the includePersonalChanges to the start backup params
func (o *StartBackupParams) SetIncludePersonalChanges(includePersonalChanges *bool) {
	o.IncludePersonalChanges = includePersonalChanges
}

// WithIncludeRunningBuilds adds the includeRunningBuilds to the start backup params
func (o *StartBackupParams) WithIncludeRunningBuilds(includeRunningBuilds *bool) *StartBackupParams {
	o.SetIncludeRunningBuilds(includeRunningBuilds)
	return o
}

// SetIncludeRunningBuilds adds the includeRunningBuilds to the start backup params
func (o *StartBackupParams) SetIncludeRunningBuilds(includeRunningBuilds *bool) {
	o.IncludeRunningBuilds = includeRunningBuilds
}

// WithIncludeSupplimentaryData adds the includeSupplimentaryData to the start backup params
func (o *StartBackupParams) WithIncludeSupplimentaryData(includeSupplimentaryData *bool) *StartBackupParams {
	o.SetIncludeSupplimentaryData(includeSupplimentaryData)
	return o
}

// SetIncludeSupplimentaryData adds the includeSupplimentaryData to the start backup params
func (o *StartBackupParams) SetIncludeSupplimentaryData(includeSupplimentaryData *bool) {
	o.IncludeSupplimentaryData = includeSupplimentaryData
}

// WriteToRequest writes these params to a swagger request
func (o *StartBackupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddTimestamp != nil {

		// query param addTimestamp
		var qrAddTimestamp bool
		if o.AddTimestamp != nil {
			qrAddTimestamp = *o.AddTimestamp
		}
		qAddTimestamp := swag.FormatBool(qrAddTimestamp)
		if qAddTimestamp != "" {
			if err := r.SetQueryParam("addTimestamp", qAddTimestamp); err != nil {
				return err
			}
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.FileName != nil {

		// query param fileName
		var qrFileName string
		if o.FileName != nil {
			qrFileName = *o.FileName
		}
		qFileName := qrFileName
		if qFileName != "" {
			if err := r.SetQueryParam("fileName", qFileName); err != nil {
				return err
			}
		}

	}

	if o.IncludeBuildLogs != nil {

		// query param includeBuildLogs
		var qrIncludeBuildLogs bool
		if o.IncludeBuildLogs != nil {
			qrIncludeBuildLogs = *o.IncludeBuildLogs
		}
		qIncludeBuildLogs := swag.FormatBool(qrIncludeBuildLogs)
		if qIncludeBuildLogs != "" {
			if err := r.SetQueryParam("includeBuildLogs", qIncludeBuildLogs); err != nil {
				return err
			}
		}

	}

	if o.IncludeConfigs != nil {

		// query param includeConfigs
		var qrIncludeConfigs bool
		if o.IncludeConfigs != nil {
			qrIncludeConfigs = *o.IncludeConfigs
		}
		qIncludeConfigs := swag.FormatBool(qrIncludeConfigs)
		if qIncludeConfigs != "" {
			if err := r.SetQueryParam("includeConfigs", qIncludeConfigs); err != nil {
				return err
			}
		}

	}

	if o.IncludeDatabase != nil {

		// query param includeDatabase
		var qrIncludeDatabase bool
		if o.IncludeDatabase != nil {
			qrIncludeDatabase = *o.IncludeDatabase
		}
		qIncludeDatabase := swag.FormatBool(qrIncludeDatabase)
		if qIncludeDatabase != "" {
			if err := r.SetQueryParam("includeDatabase", qIncludeDatabase); err != nil {
				return err
			}
		}

	}

	if o.IncludePersonalChanges != nil {

		// query param includePersonalChanges
		var qrIncludePersonalChanges bool
		if o.IncludePersonalChanges != nil {
			qrIncludePersonalChanges = *o.IncludePersonalChanges
		}
		qIncludePersonalChanges := swag.FormatBool(qrIncludePersonalChanges)
		if qIncludePersonalChanges != "" {
			if err := r.SetQueryParam("includePersonalChanges", qIncludePersonalChanges); err != nil {
				return err
			}
		}

	}

	if o.IncludeRunningBuilds != nil {

		// query param includeRunningBuilds
		var qrIncludeRunningBuilds bool
		if o.IncludeRunningBuilds != nil {
			qrIncludeRunningBuilds = *o.IncludeRunningBuilds
		}
		qIncludeRunningBuilds := swag.FormatBool(qrIncludeRunningBuilds)
		if qIncludeRunningBuilds != "" {
			if err := r.SetQueryParam("includeRunningBuilds", qIncludeRunningBuilds); err != nil {
				return err
			}
		}

	}

	if o.IncludeSupplimentaryData != nil {

		// query param includeSupplimentaryData
		var qrIncludeSupplimentaryData bool
		if o.IncludeSupplimentaryData != nil {
			qrIncludeSupplimentaryData = *o.IncludeSupplimentaryData
		}
		qIncludeSupplimentaryData := swag.FormatBool(qrIncludeSupplimentaryData)
		if qIncludeSupplimentaryData != "" {
			if err := r.SetQueryParam("includeSupplimentaryData", qIncludeSupplimentaryData); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
