// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetGroupParams creates a new GetGroupParams object
// with the default values initialized.
func NewGetGroupParams() *GetGroupParams {
	var ()
	return &GetGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGroupParamsWithTimeout creates a new GetGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGroupParamsWithTimeout(timeout time.Duration) *GetGroupParams {
	var ()
	return &GetGroupParams{

		timeout: timeout,
	}
}

// NewGetGroupParamsWithContext creates a new GetGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGroupParamsWithContext(ctx context.Context) *GetGroupParams {
	var ()
	return &GetGroupParams{

		Context: ctx,
	}
}

// NewGetGroupParamsWithHTTPClient creates a new GetGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGroupParamsWithHTTPClient(client *http.Client) *GetGroupParams {
	var ()
	return &GetGroupParams{
		HTTPClient: client,
	}
}

/*GetGroupParams contains all the parameters to send to the API endpoint
for the get group operation typically these are written to a http.Request
*/
type GetGroupParams struct {

	/*Fields*/
	Fields *string
	/*GroupLocator*/
	GroupLocator string
	/*UserLocator*/
	UserLocator string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get group params
func (o *GetGroupParams) WithTimeout(timeout time.Duration) *GetGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get group params
func (o *GetGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get group params
func (o *GetGroupParams) WithContext(ctx context.Context) *GetGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get group params
func (o *GetGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get group params
func (o *GetGroupParams) WithHTTPClient(client *http.Client) *GetGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get group params
func (o *GetGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the get group params
func (o *GetGroupParams) WithFields(fields *string) *GetGroupParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get group params
func (o *GetGroupParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithGroupLocator adds the groupLocator to the get group params
func (o *GetGroupParams) WithGroupLocator(groupLocator string) *GetGroupParams {
	o.SetGroupLocator(groupLocator)
	return o
}

// SetGroupLocator adds the groupLocator to the get group params
func (o *GetGroupParams) SetGroupLocator(groupLocator string) {
	o.GroupLocator = groupLocator
}

// WithUserLocator adds the userLocator to the get group params
func (o *GetGroupParams) WithUserLocator(userLocator string) *GetGroupParams {
	o.SetUserLocator(userLocator)
	return o
}

// SetUserLocator adds the userLocator to the get group params
func (o *GetGroupParams) SetUserLocator(userLocator string) {
	o.UserLocator = userLocator
}

// WriteToRequest writes these params to a swagger request
func (o *GetGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param groupLocator
	if err := r.SetPathParam("groupLocator", o.GroupLocator); err != nil {
		return err
	}

	// path param userLocator
	if err := r.SetPathParam("userLocator", o.UserLocator); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
