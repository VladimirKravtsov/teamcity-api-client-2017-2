// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListRoleParams creates a new ListRoleParams object
// with the default values initialized.
func NewListRoleParams() *ListRoleParams {
	var ()
	return &ListRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRoleParamsWithTimeout creates a new ListRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRoleParamsWithTimeout(timeout time.Duration) *ListRoleParams {
	var ()
	return &ListRoleParams{

		timeout: timeout,
	}
}

// NewListRoleParamsWithContext creates a new ListRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewListRoleParamsWithContext(ctx context.Context) *ListRoleParams {
	var ()
	return &ListRoleParams{

		Context: ctx,
	}
}

// NewListRoleParamsWithHTTPClient creates a new ListRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRoleParamsWithHTTPClient(client *http.Client) *ListRoleParams {
	var ()
	return &ListRoleParams{
		HTTPClient: client,
	}
}

/*ListRoleParams contains all the parameters to send to the API endpoint
for the list role operation typically these are written to a http.Request
*/
type ListRoleParams struct {

	/*RoleID*/
	RoleID string
	/*Scope*/
	Scope string
	/*UserLocator*/
	UserLocator string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list role params
func (o *ListRoleParams) WithTimeout(timeout time.Duration) *ListRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list role params
func (o *ListRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list role params
func (o *ListRoleParams) WithContext(ctx context.Context) *ListRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list role params
func (o *ListRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list role params
func (o *ListRoleParams) WithHTTPClient(client *http.Client) *ListRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list role params
func (o *ListRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRoleID adds the roleID to the list role params
func (o *ListRoleParams) WithRoleID(roleID string) *ListRoleParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the list role params
func (o *ListRoleParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WithScope adds the scope to the list role params
func (o *ListRoleParams) WithScope(scope string) *ListRoleParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the list role params
func (o *ListRoleParams) SetScope(scope string) {
	o.Scope = scope
}

// WithUserLocator adds the userLocator to the list role params
func (o *ListRoleParams) WithUserLocator(userLocator string) *ListRoleParams {
	o.SetUserLocator(userLocator)
	return o
}

// SetUserLocator adds the userLocator to the list role params
func (o *ListRoleParams) SetUserLocator(userLocator string) {
	o.UserLocator = userLocator
}

// WriteToRequest writes these params to a swagger request
func (o *ListRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	// path param scope
	if err := r.SetPathParam("scope", o.Scope); err != nil {
		return err
	}

	// path param userLocator
	if err := r.SetPathParam("userLocator", o.UserLocator); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
