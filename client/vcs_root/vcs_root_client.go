// Code generated by go-swagger; DO NOT EDIT.

package vcs_root

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new vcs root API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vcs root API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddRoot add root API
*/
func (a *Client) AddRoot(params *AddRootParams, authInfo runtime.ClientAuthInfoWriter) (*AddRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addRoot",
		Method:             "POST",
		PathPattern:        "/app/rest/vcs-roots",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRootOK), nil

}

/*
ChangeProperties change properties API
*/
func (a *Client) ChangeProperties(params *ChangePropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*ChangePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeProperties",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangePropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangePropertiesOK), nil

}

/*
DeleteAllProperties delete all properties API
*/
func (a *Client) DeleteAllProperties(params *DeleteAllPropertiesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllPropertiesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllProperties",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllPropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteParameter delete parameter API
*/
func (a *Client) DeleteParameter(params *DeleteParameterParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParameterParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteParameter",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteRoot delete root API
*/
func (a *Client) DeleteRoot(params *DeleteRootParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRootParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoot",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSettingsFile get settings file API
*/
func (a *Client) GetSettingsFile(params *GetSettingsFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetSettingsFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsFile",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/settingsFile",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingsFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsFileOK), nil

}

/*
PutParameter put parameter API
*/
func (a *Client) PutParameter(params *PutParameterParams, authInfo runtime.ClientAuthInfoWriter) (*PutParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutParameterOK), nil

}

/*
ServeField serve field API
*/
func (a *Client) ServeField(params *ServeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveField",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeFieldOK), nil

}

/*
ServeInstanceField serve instance field API
*/
func (a *Client) ServeInstanceField(params *ServeInstanceFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeInstanceFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeInstanceFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveInstanceField",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeInstanceFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeInstanceFieldOK), nil

}

/*
ServeProperties serve properties API
*/
func (a *Client) ServeProperties(params *ServePropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*ServePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServePropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServePropertiesOK), nil

}

/*
ServeProperty serve property API
*/
func (a *Client) ServeProperty(params *ServePropertyParams, authInfo runtime.ClientAuthInfoWriter) (*ServePropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServePropertyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveProperty",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServePropertyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServePropertyOK), nil

}

/*
ServeRoot serve root API
*/
func (a *Client) ServeRoot(params *ServeRootParams, authInfo runtime.ClientAuthInfoWriter) (*ServeRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveRoot",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeRootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeRootOK), nil

}

/*
ServeRootInstance serve root instance API
*/
func (a *Client) ServeRootInstance(params *ServeRootInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*ServeRootInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeRootInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveRootInstance",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeRootInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeRootInstanceOK), nil

}

/*
ServeRootInstanceProperties serve root instance properties API
*/
func (a *Client) ServeRootInstanceProperties(params *ServeRootInstancePropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeRootInstancePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeRootInstancePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveRootInstanceProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeRootInstancePropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeRootInstancePropertiesOK), nil

}

/*
ServeRootInstances serve root instances API
*/
func (a *Client) ServeRootInstances(params *ServeRootInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeRootInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeRootInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveRootInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/instances",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeRootInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeRootInstancesOK), nil

}

/*
ServeRoots serve roots API
*/
func (a *Client) ServeRoots(params *ServeRootsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeRootsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeRootsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveRoots",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeRootsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServeRootsOK), nil

}

/*
SetField set field API
*/
func (a *Client) SetField(params *SetFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setField",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetFieldOK), nil

}

/*
SetInstanceField set instance field API
*/
func (a *Client) SetInstanceField(params *SetInstanceFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetInstanceFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetInstanceFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setInstanceField",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/instances/{vcsRootInstanceLocator}/{field}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetInstanceFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetInstanceFieldOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
