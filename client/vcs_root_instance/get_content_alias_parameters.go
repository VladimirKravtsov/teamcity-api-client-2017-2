// Code generated by go-swagger; DO NOT EDIT.

package vcs_root_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContentAliasParams creates a new GetContentAliasParams object
// with the default values initialized.
func NewGetContentAliasParams() *GetContentAliasParams {
	var ()
	return &GetContentAliasParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentAliasParamsWithTimeout creates a new GetContentAliasParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContentAliasParamsWithTimeout(timeout time.Duration) *GetContentAliasParams {
	var ()
	return &GetContentAliasParams{

		timeout: timeout,
	}
}

// NewGetContentAliasParamsWithContext creates a new GetContentAliasParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContentAliasParamsWithContext(ctx context.Context) *GetContentAliasParams {
	var ()
	return &GetContentAliasParams{

		Context: ctx,
	}
}

// NewGetContentAliasParamsWithHTTPClient creates a new GetContentAliasParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContentAliasParamsWithHTTPClient(client *http.Client) *GetContentAliasParams {
	var ()
	return &GetContentAliasParams{
		HTTPClient: client,
	}
}

/*GetContentAliasParams contains all the parameters to send to the API endpoint
for the get content alias operation typically these are written to a http.Request
*/
type GetContentAliasParams struct {

	/*Path*/
	Path string
	/*VcsRootInstanceLocator*/
	VcsRootInstanceLocator string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get content alias params
func (o *GetContentAliasParams) WithTimeout(timeout time.Duration) *GetContentAliasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content alias params
func (o *GetContentAliasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content alias params
func (o *GetContentAliasParams) WithContext(ctx context.Context) *GetContentAliasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content alias params
func (o *GetContentAliasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content alias params
func (o *GetContentAliasParams) WithHTTPClient(client *http.Client) *GetContentAliasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content alias params
func (o *GetContentAliasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPath adds the path to the get content alias params
func (o *GetContentAliasParams) WithPath(path string) *GetContentAliasParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get content alias params
func (o *GetContentAliasParams) SetPath(path string) {
	o.Path = path
}

// WithVcsRootInstanceLocator adds the vcsRootInstanceLocator to the get content alias params
func (o *GetContentAliasParams) WithVcsRootInstanceLocator(vcsRootInstanceLocator string) *GetContentAliasParams {
	o.SetVcsRootInstanceLocator(vcsRootInstanceLocator)
	return o
}

// SetVcsRootInstanceLocator adds the vcsRootInstanceLocator to the get content alias params
func (o *GetContentAliasParams) SetVcsRootInstanceLocator(vcsRootInstanceLocator string) {
	o.VcsRootInstanceLocator = vcsRootInstanceLocator
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentAliasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	// path param vcsRootInstanceLocator
	if err := r.SetPathParam("vcsRootInstanceLocator", o.VcsRootInstanceLocator); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
