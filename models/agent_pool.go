// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AgentPool agent pool
// swagger:model agentPool
type AgentPool struct {

	// agents
	Agents *Agents `json:"agents,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href"`

	// id
	ID int32 `json:"id,omitempty" xml:"id"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator"`

	// max agents
	MaxAgents int32 `json:"maxAgents,omitempty" xml:"maxAgents"`

	// name
	Name string `json:"name,omitempty" xml:"name"`

	// projects
	Projects *Projects `json:"projects,omitempty"`
}

// Validate validates this agent pool
func (m *AgentPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentPool) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if m.Agents != nil {
		if err := m.Agents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPool) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentPool) UnmarshalBinary(b []byte) error {
	var res AgentPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
