// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupProcess backup process
// swagger:model BackupProcess
type BackupProcess struct {

	// brief info
	BriefInfo *BackupProcessInfo `json:"briefInfo,omitempty"`

	// exceptions
	Exceptions []*Exception `json:"exceptions"`

	// finished
	Finished *bool `json:"finished,omitempty"`

	// process Id
	ProcessID int32 `json:"processId,omitempty"`

	// process kind
	// Enum: [Backup Restore Cleanup]
	ProcessKind string `json:"processKind,omitempty"`

	// progress info
	ProgressInfo *ProgressInfo `json:"progressInfo,omitempty"`

	// progress status
	// Enum: [Running Cancelling Cancelled Finished Fault]
	ProgressStatus string `json:"progressStatus,omitempty"`
}

// Validate validates this backup process
func (m *BackupProcess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBriefInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupProcess) validateBriefInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.BriefInfo) { // not required
		return nil
	}

	if m.BriefInfo != nil {
		if err := m.BriefInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("briefInfo")
			}
			return err
		}
	}

	return nil
}

func (m *BackupProcess) validateExceptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Exceptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Exceptions); i++ {
		if swag.IsZero(m.Exceptions[i]) { // not required
			continue
		}

		if m.Exceptions[i] != nil {
			if err := m.Exceptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var backupProcessTypeProcessKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Backup","Restore","Cleanup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupProcessTypeProcessKindPropEnum = append(backupProcessTypeProcessKindPropEnum, v)
	}
}

const (

	// BackupProcessProcessKindBackup captures enum value "Backup"
	BackupProcessProcessKindBackup string = "Backup"

	// BackupProcessProcessKindRestore captures enum value "Restore"
	BackupProcessProcessKindRestore string = "Restore"

	// BackupProcessProcessKindCleanup captures enum value "Cleanup"
	BackupProcessProcessKindCleanup string = "Cleanup"
)

// prop value enum
func (m *BackupProcess) validateProcessKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupProcessTypeProcessKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupProcess) validateProcessKind(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessKind) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessKindEnum("processKind", "body", m.ProcessKind); err != nil {
		return err
	}

	return nil
}

func (m *BackupProcess) validateProgressInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgressInfo) { // not required
		return nil
	}

	if m.ProgressInfo != nil {
		if err := m.ProgressInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progressInfo")
			}
			return err
		}
	}

	return nil
}

var backupProcessTypeProgressStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Cancelling","Cancelled","Finished","Fault"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupProcessTypeProgressStatusPropEnum = append(backupProcessTypeProgressStatusPropEnum, v)
	}
}

const (

	// BackupProcessProgressStatusRunning captures enum value "Running"
	BackupProcessProgressStatusRunning string = "Running"

	// BackupProcessProgressStatusCancelling captures enum value "Cancelling"
	BackupProcessProgressStatusCancelling string = "Cancelling"

	// BackupProcessProgressStatusCancelled captures enum value "Cancelled"
	BackupProcessProgressStatusCancelled string = "Cancelled"

	// BackupProcessProgressStatusFinished captures enum value "Finished"
	BackupProcessProgressStatusFinished string = "Finished"

	// BackupProcessProgressStatusFault captures enum value "Fault"
	BackupProcessProgressStatusFault string = "Fault"
)

// prop value enum
func (m *BackupProcess) validateProgressStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupProcessTypeProgressStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupProcess) validateProgressStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgressStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProgressStatusEnum("progressStatus", "body", m.ProgressStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupProcess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupProcess) UnmarshalBinary(b []byte) error {
	var res BackupProcess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
