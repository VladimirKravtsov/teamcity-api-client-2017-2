// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupProcessInfo backup process info
// swagger:model BackupProcessInfo
type BackupProcessInfo struct {

	// file name
	FileName string `json:"fileName,omitempty"`

	// file size
	FileSize int64 `json:"fileSize,omitempty"`

	// finish timestamp
	// Format: date-time
	FinishTimestamp strfmt.DateTime `json:"finishTimestamp,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// start timestamp
	// Format: date-time
	StartTimestamp strfmt.DateTime `json:"startTimestamp,omitempty"`

	// status
	// Enum: [Running Cancelling Cancelled Finished Fault]
	Status string `json:"status,omitempty"`
}

// Validate validates this backup process info
func (m *BackupProcessInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupProcessInfo) validateFinishTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTimestamp", "body", "date-time", m.FinishTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupProcessInfo) validateStartTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var backupProcessInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Cancelling","Cancelled","Finished","Fault"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupProcessInfoTypeStatusPropEnum = append(backupProcessInfoTypeStatusPropEnum, v)
	}
}

const (

	// BackupProcessInfoStatusRunning captures enum value "Running"
	BackupProcessInfoStatusRunning string = "Running"

	// BackupProcessInfoStatusCancelling captures enum value "Cancelling"
	BackupProcessInfoStatusCancelling string = "Cancelling"

	// BackupProcessInfoStatusCancelled captures enum value "Cancelled"
	BackupProcessInfoStatusCancelled string = "Cancelled"

	// BackupProcessInfoStatusFinished captures enum value "Finished"
	BackupProcessInfoStatusFinished string = "Finished"

	// BackupProcessInfoStatusFault captures enum value "Fault"
	BackupProcessInfoStatusFault string = "Fault"
)

// prop value enum
func (m *BackupProcessInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backupProcessInfoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackupProcessInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupProcessInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupProcessInfo) UnmarshalBinary(b []byte) error {
	var res BackupProcessInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
