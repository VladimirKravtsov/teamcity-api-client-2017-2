// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Change change
// swagger:model change
type Change struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// date
	Date string `json:"date,omitempty" xml:"date"`

	// files
	Files *FileChanges `json:"files,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href"`

	// id
	ID int64 `json:"id,omitempty" xml:"id"`

	// internal version
	InternalVersion string `json:"internalVersion,omitempty" xml:"internalVersion"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator"`

	// parent changes
	ParentChanges *Changes `json:"parentChanges,omitempty"`

	// parent revisions
	ParentRevisions *Items `json:"parentRevisions,omitempty"`

	// personal
	Personal *bool `json:"personal,omitempty" xml:"personal"`

	// registration date
	RegistrationDate string `json:"registrationDate,omitempty" xml:"registrationDate"`

	// user
	User *User `json:"user,omitempty"`

	// username
	Username string `json:"username,omitempty" xml:"username"`

	// vcs root instance
	VcsRootInstance *VcsRootInstance `json:"vcsRootInstance,omitempty"`

	// version
	Version string `json:"version,omitempty" xml:"version"`

	// web Url
	WebURL string `json:"webUrl,omitempty" xml:"webUrl"`
}

// Validate validates this change
func (m *Change) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRevisions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsRootInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Change) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {
		if err := m.Files.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

func (m *Change) validateParentChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentChanges) { // not required
		return nil
	}

	if m.ParentChanges != nil {
		if err := m.ParentChanges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentChanges")
			}
			return err
		}
	}

	return nil
}

func (m *Change) validateParentRevisions(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentRevisions) { // not required
		return nil
	}

	if m.ParentRevisions != nil {
		if err := m.ParentRevisions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentRevisions")
			}
			return err
		}
	}

	return nil
}

func (m *Change) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *Change) validateVcsRootInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.VcsRootInstance) { // not required
		return nil
	}

	if m.VcsRootInstance != nil {
		if err := m.VcsRootInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRootInstance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Change) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Change) UnmarshalBinary(b []byte) error {
	var res Change
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
