// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Server server
// swagger:model server
type Server struct {

	// agent pools
	AgentPools *Href `json:"agentPools,omitempty"`

	// agents
	Agents *Href `json:"agents,omitempty"`

	// build date
	BuildDate string `json:"buildDate,omitempty" xml:"buildDate"`

	// build number
	BuildNumber string `json:"buildNumber,omitempty" xml:"buildNumber"`

	// build queue
	BuildQueue *Href `json:"buildQueue,omitempty"`

	// builds
	Builds *Href `json:"builds,omitempty"`

	// current time
	CurrentTime string `json:"currentTime,omitempty" xml:"currentTime"`

	// internal Id
	InternalID string `json:"internalId,omitempty" xml:"internalId"`

	// investigations
	Investigations *Href `json:"investigations,omitempty"`

	// mutes
	Mutes *Href `json:"mutes,omitempty"`

	// projects
	Projects *Href `json:"projects,omitempty"`

	// role
	Role string `json:"role,omitempty" xml:"role"`

	// start time
	StartTime string `json:"startTime,omitempty" xml:"startTime"`

	// user groups
	UserGroups *Href `json:"userGroups,omitempty"`

	// users
	Users *Href `json:"users,omitempty"`

	// vcs roots
	VcsRoots *Href `json:"vcsRoots,omitempty"`

	// version
	Version string `json:"version,omitempty" xml:"version"`

	// version major
	VersionMajor int32 `json:"versionMajor,omitempty" xml:"versionMajor"`

	// version minor
	VersionMinor int32 `json:"versionMinor,omitempty" xml:"versionMinor"`

	// web Url
	WebURL string `json:"webUrl,omitempty" xml:"webUrl"`
}

// Validate validates this server
func (m *Server) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentPools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuilds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvestigations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsRoots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Server) validateAgentPools(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentPools) { // not required
		return nil
	}

	if m.AgentPools != nil {
		if err := m.AgentPools.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentPools")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if m.Agents != nil {
		if err := m.Agents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateBuildQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildQueue) { // not required
		return nil
	}

	if m.BuildQueue != nil {
		if err := m.BuildQueue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildQueue")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateBuilds(formats strfmt.Registry) error {

	if swag.IsZero(m.Builds) { // not required
		return nil
	}

	if m.Builds != nil {
		if err := m.Builds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("builds")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateInvestigations(formats strfmt.Registry) error {

	if swag.IsZero(m.Investigations) { // not required
		return nil
	}

	if m.Investigations != nil {
		if err := m.Investigations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("investigations")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateMutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Mutes) { // not required
		return nil
	}

	if m.Mutes != nil {
		if err := m.Mutes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutes")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateUserGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	if m.UserGroups != nil {
		if err := m.UserGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userGroups")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateVcsRoots(formats strfmt.Registry) error {

	if swag.IsZero(m.VcsRoots) { // not required
		return nil
	}

	if m.VcsRoots != nil {
		if err := m.VcsRoots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRoots")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Server) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Server) UnmarshalBinary(b []byte) error {
	var res Server
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
