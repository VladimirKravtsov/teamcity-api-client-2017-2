// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VcsRootInstance vcs root instance
// swagger:model vcs-root-instance
type VcsRootInstance struct {

	// commit hook mode
	CommitHookMode *bool `json:"commitHookMode,omitempty" xml:"commitHookMode"`

	// href
	Href string `json:"href,omitempty" xml:"href"`

	// id
	ID string `json:"id,omitempty" xml:"id"`

	// last version
	LastVersion string `json:"lastVersion,omitempty" xml:"lastVersion"`

	// last version internal
	LastVersionInternal string `json:"lastVersionInternal,omitempty" xml:"lastVersionInternal"`

	// modification check interval
	ModificationCheckInterval int32 `json:"modificationCheckInterval,omitempty" xml:"modificationCheckInterval"`

	// name
	Name string `json:"name,omitempty" xml:"name"`

	// project locator
	ProjectLocator string `json:"projectLocator,omitempty" xml:"projectLocator"`

	// properties
	Properties *Properties `json:"properties,omitempty"`

	// repository Id strings
	RepositoryIDStrings *Items `json:"repositoryIdStrings,omitempty"`

	// repository state
	RepositoryState *RepositoryState `json:"repositoryState,omitempty"`

	// status
	Status *VcsStatus `json:"status,omitempty"`

	// vcs root
	VcsRoot *VcsRoot `json:"vcs-root,omitempty"`

	// vcs root id
	VcsRootID string `json:"vcs-root-id,omitempty" xml:"vcs-root-id"`

	// vcs name
	VcsName string `json:"vcsName,omitempty" xml:"vcsName"`

	// vcs root internal Id
	VcsRootInternalID string `json:"vcsRootInternalId,omitempty" xml:"vcsRootInternalId"`
}

// Validate validates this vcs root instance
func (m *VcsRootInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryIDStrings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsRoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcsRootInstance) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *VcsRootInstance) validateRepositoryIDStrings(formats strfmt.Registry) error {

	if swag.IsZero(m.RepositoryIDStrings) { // not required
		return nil
	}

	if m.RepositoryIDStrings != nil {
		if err := m.RepositoryIDStrings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repositoryIdStrings")
			}
			return err
		}
	}

	return nil
}

func (m *VcsRootInstance) validateRepositoryState(formats strfmt.Registry) error {

	if swag.IsZero(m.RepositoryState) { // not required
		return nil
	}

	if m.RepositoryState != nil {
		if err := m.RepositoryState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repositoryState")
			}
			return err
		}
	}

	return nil
}

func (m *VcsRootInstance) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *VcsRootInstance) validateVcsRoot(formats strfmt.Registry) error {

	if swag.IsZero(m.VcsRoot) { // not required
		return nil
	}

	if m.VcsRoot != nil {
		if err := m.VcsRoot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs-root")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VcsRootInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcsRootInstance) UnmarshalBinary(b []byte) error {
	var res VcsRootInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
